/*************************************************************************************************************************************************************************
 
 
                                                             ........................................................
                                                                               ROBOT BLOCKCHAIN
                                                             ........................................................
                                                  
                                                  
                                               
                                 
* This file is part of ROBOFA project
* version 1.0.0
* date 2021/2/20
* version Solidity 0.5.1

 
 - Symbol        : RBC
 - Name          : Robochain for Financial Answers
 - Total supply  : 1000000
 - Decimals      : 0


  -List of functions
      
    ok   function Set_owners (address _owner) public is_owner;                                                                            //The address of the new owner is registered.
      
    ok   function Get_Owners() public view is_owner returns (address [] memory);                                                        //Show owners
      
    ok   function Delete_owner(address _to) public is_owner
         
    ok   function Set_current_stock_price (uint _newPrice) public is_owner;                                                           //Set new stock prices
       
    ok   function Get_current_stock_price () public view returns (uint);                                                            // Get current stock price
     
    ok   function Get_stock_price_list () public view returns (uint [] memory , uint [] memory)                                   // Get stock price history
     
    ok   function Set_fee_loan (uint value) public is_owner;                                                                        //Set stock fees
      
    ok   function Get_fee_loan () public view returns (uint);                                                                      //Get stock fees                      
     
    ok   function send_InitialStock (address _investor , uint number_stock) public is_owner returns (bool);                       //The initial allocation of stock
    
    ok   function Get_base_stock_price()public view returns(uint);                                                               //Get the stock base price
      
    ok   function Get_totalSupply()public view is_owner returns(uint);                                                          //Get the number of initial stock
     
    ok   function Get_manager()public view returns(address);                                                                   //Get the address of the original owner
     
    ok   function Set_suggestPriceUser (uint _price) public;                                                                 //Set the user's bid price for stocks
     
    ok   function Get_suggestPriceUser(address _address) public view returns;                                                   //Get the user's bid price for stocks
      
    ok   function Calculate_Amount_returned_with_fee(uint _value) public view returns(uint);                                //Calculate the amount returned with the commission
       
       function send_collateral_between_users ( address _to , uint _Repayment_time , uint _value ) public;           //Send collateral shares between users    
     
       function Release_Collateral_User ( address _to , bool confirm ) public returns (bool);                           //Release of collateral shares between users  
     
       function Get_collateral_between_users(address _from,address _to)public view returns(uint,uint,uint);            //Get of collateral shares between users                 
     
    ok   function send_Token_collatral_owner( uint _value,uint _Repayment_time) public;                                 //Send collateral token to owner
     
    ok   function Release_Token_collatral_owner ( address _to , bool confirm ) public is_owner;                                 //Release of collateral tokens by the owner
     
       function Get_collateral_between_UserOwner(address _to)public view returns(uint,uint,uint);                   //Receive collateral between users and owner
       
    ok   function transfer (address _to , uint256 _value) public returns (bool success);                            //Token transfer
      
    ok   function balanceOf(address addr) public view  returns (uint256 balance);                                  //User inventory
     
       function approve(address _spender, uint256 _value) public returns (bool success);                        // 
     
       function allowance(address _owner, address _spender) public view returns (uint256 remaining);           //
     
    ok   function Self_Destruct () public;                                                                       //Eliminate contract
     
       function User_recognition ( address user ) private view returns ( bool );                             //
     
       function calcute_number_stock ( address _to , uint _value ) private view returns ( uint );           //
     
       function calculate_Token ( uint _value ) private view returns ( uint , uint );                      //
  
        
/****************************************************************************************************************************************************************************/

pragma solidity ^0.5.1;

contract ROROBOFA{


/*-----------------------------------------------------------------------------------------------------------------------
                                                        variable
-----------------------------------------------------------------------------------------------------------------------*/

    uint _totalSupply;
    string public   _name;              
    string private   _symbol;             
    uint private  _current_stock_price;
    uint private  _base_stock_price;
    address private  _manager;
    uint private  _fee_loan;
    uint8 public _decimals;
  //  address[] private _owner_address;         //Address of owners

    
/*-----------------------------------------------------------------------------------------------------------------------
                                                        struct
-----------------------------------------------------------------------------------------------------------------------*/    

    struct stock_price{
        
        uint date;
        uint price;
        
    }
    stock_price[] _Stock_price_list; // Stock price history
    
               
    struct collateral_between_users{
        
        uint Repayment_time;   
        uint value;         
        uint number_token;  
        
    }
    mapping (address => mapping (address => collateral_between_users)) private _collateral_between_users;
    

    struct collateral_between_UserOwner{
        
        uint Repayment_time;    
        uint value;        
        uint number_token;   
        
    }

    mapping (address => collateral_between_UserOwner) public _collateral_between_UserOwner;
    
    mapping ( address => uint ) private blocked_token;
    
    mapping ( address => uint ) private User_suggested_price;
    
    mapping ( address => bool ) private owners;
    
    mapping ( address => uint ) private balances;
    
    mapping ( address => mapping ( address => uint256 )) private allowed;
    
    
/*-----------------------------------------------------------------------------------------------------------------------
                                                        constructor
-----------------------------------------------------------------------------------------------------------------------*/  

    constructor (string memory name , string memory symbol, uint8 decimals, uint initialSupply , uint _feeLoan, uint _base_priceStock) public  {
        _name = name; 
        _symbol = symbol;
        _decimals=decimals;
        _totalSupply = initialSupply; 
        balances [msg.sender] = initialSupply;    
        _manager = msg.sender;
        owners [msg.sender] = true;
       
        _base_stock_price = _base_priceStock;
        
        _current_stock_price = _base_stock_price;
        
        _fee_loan = _feeLoan;
        
        

    }
    
    


    modifier is_owner {
        
        require (owners [msg.sender]==true);
        _;
        
    }
    

/*-----------------------------------------------------------------------------------------------------------------------
                                                       Owner functions
-----------------------------------------------------------------------------------------------------------------------*/

/*                                  ...................................................
                                              Set and get functions for owners  
                                    ...................................................
*/

    
    function Set_owners (address _owner) public is_owner {
        
        
      owners [_owner] = true;

   //   _owner_address.push( _owner );
 
       
    }
    
    function Get_Owners(address _address) public view is_owner returns (bool) {
      
       return owners[_address];
       
       
    }
    function Delete_owner(address _to) public is_owner{
        
        owners [_to] = false;
        
    }

  
/*                                   ...................................................
                                        Set and get functions for Current stock price  
                                     ...................................................
*/


    function Set_current_stock_priceANDfee_loan (uint _newPrice,uint _feeLoan) public is_owner {
        
        stock_price memory temp;
        
        _current_stock_price = _newPrice;
        
        temp.date=now;
        
        temp.price=_newPrice;
        
        _Stock_price_list.push(temp);
        
         _fee_loan = _feeLoan;
        
        emit change_stock_price ( _current_stock_price );
        
        
        
    }
    
    event change_stock_price ( uint newPrice );

  
    function Get_current_stock_priceANDfee_loan () public view returns (uint ,uint){
        
        return (_current_stock_price,_fee_loan);
        
    }  
    
    
    function Get_stock_price_list () public view returns (uint [] memory , uint [] memory){
        
       uint[] memory price = new uint[](_Stock_price_list.length);
       
       uint[] memory date = new uint[](_Stock_price_list.length);
     
       for (uint i=0 ; i<_Stock_price_list.length ; i++){
            
            price[i]=_Stock_price_list[i].price;
            
            date[i]=_Stock_price_list[i].date;
        
        }
        
        return (price , date);
        
    }


/*                                   ...................................................
                                              Set and get functions for fee loan  
                                     ...................................................
*/


    //function Set_fee_loan (uint value) public is_owner {
        
    //    _fee_loan = value;
        
  //  }
    
  //  function Get_fee_loan () public view returns (uint) {
        
   //     return _fee_loan;
        
  //  }
    
    
/*                                   ...................................................
                                              The initial allocation of stock 
                                     ...................................................
*/


    function send_InitialStock (address _investor , uint number_stock) public is_owner returns (bool) {
        
        require (number_stock > 0);
        
        return ( transfer ( _investor , number_stock ) );
        
    }
    
    
/*                                   ...................................................
                                               Get functions for totalsupply
                                     ...................................................
*/
    
    function Get_totalSupply() public view is_owner returns(uint) {
        
        return _totalSupply;
    }
    
/*                                   ...................................................
                                              Get functions for base stock price
                                     ...................................................
*/
    
    function Get_base_stock_price() public view returns(uint) {
        
        return _base_stock_price;
        
    }

/*                                   ...................................................
                                              Get functions for manager
                                     ...................................................
*/
    
    function Get_manager() public view returns(address){
        
        return _manager;
        
    }


/*                                   ...................................................
                                                     Destroy the contract
                                     ...................................................
*/    
    
    function Self_Destruct () public is_owner {
        
        selfdestruct ( msg.sender );
        
    }


/*-----------------------------------------------------------------------------------------------------------------------
                                        Collateral transfer functions between users
-----------------------------------------------------------------------------------------------------------------------*/


/*                                   ...................................................
                                         Get and set functions for suggestPriceUser
                                     ...................................................
*/

     
    function Set_suggestPriceUser (uint _price) public { //User offer price for stock
    
        User_suggested_price[msg.sender] = _price;
    }

    function Get_suggestPriceUser(address _address) public view returns (uint){
        
        return (User_suggested_price[_address]);
        
    }

/*                                   ...................................................
                                                 Send collateral between users
                                     ...................................................
*/

    
    function send_collateral_between_users ( address _to , uint _Repayment_time , uint _value ) public {//Send collateral against the money received
    
        uint number_token = calcute_number_stock_between_users ( _to , _value );
        
        require (number_token >= balances[msg.sender] );
        
        bool success = transfer ( _to , number_token );
        
        if ( success == true ) {
            
          _collateral_between_users[msg.sender][_to].Repayment_time = _Repayment_time;
          
          _collateral_between_users[msg.sender][_to].value = _value;
          
          _collateral_between_users[msg.sender][_to].number_token = number_token;
          
          blocked_token[_to] += number_token;
          
        }
    }
    

/*                                   ...................................................
                                           set and get Release of user collateral
                                     ...................................................
*/

    function Release_Collateral_User ( address _to , bool confirm ) public returns (bool) {
    
        if ( confirm == true ) {
            
           blocked_token [msg.sender] -= _collateral_between_users [_to][msg.sender].number_token;
           
           return transfer (_to , _collateral_between_users[_to][msg.sender].number_token );
        }
        
        else
        
        {
            
            require( now >= _collateral_between_users[_to][msg.sender].Repayment_time );
            
            blocked_token[msg.sender] -= _collateral_between_users[_to][msg.sender].number_token;
            
            delete _collateral_between_users[_to][msg.sender];
        }
    }
    
    function Get_collateral_between_users(address _from,address _to) public view returns(uint,uint,uint){

       return (_collateral_between_users[_from][_to].Repayment_time,_collateral_between_users[_from][_to].value,_collateral_between_users[_from][_to].number_token);
       
    }
    

/*-----------------------------------------------------------------------------------------------------------------------
                                        Collateral transfer functions between user and Owner
-----------------------------------------------------------------------------------------------------------------------*/


/*                                   ...................................................
                                     Send and release collateral between user and owner
                                     ...................................................
*/

    function Calculate_Amount_returned_with_fee(uint _value) public view returns(uint){
        
        uint Amount_returned_with_fee = (( _value / 100) * _fee_loan ) + _value;
        
        return Amount_returned_with_fee;
    }


    function send_Token_collatral_owner( uint _value,uint _Repayment_time) public {
        
        uint number_token;
        
        uint value_fee;
        
        ( number_token , value_fee ) = calculate_NumberToken_requestedOwner ( _value );
        
        bool success = transfer (_manager, number_token );
        
        if (success==true)
        {
            
          blocked_token[_manager]+=number_token;
        
           _collateral_between_UserOwner[msg.sender].value = value_fee;
        
           _collateral_between_UserOwner[msg.sender].Repayment_time = _Repayment_time;
        
          _collateral_between_UserOwner[msg.sender].number_token = number_token;
        
        }
    }
    
    
    
   function Release_Token_collatral_owner ( address _to , bool confirm ) public is_owner{//Collateral release
   
        if ( confirm == true ) {
            
           blocked_token[_manager]-= _collateral_between_UserOwner[_to].number_token;
            
           transfer ( _to , _collateral_between_UserOwner[msg.sender].number_token );
           
           delete _collateral_between_UserOwner[_to];
           
        }
        
        else
        
        {
            require ( now >= _collateral_between_UserOwner[_to].Repayment_time );
            
            blocked_token[_manager]-= _collateral_between_UserOwner[_to].number_token;
            
            delete _collateral_between_UserOwner[_to];
        
        }
        
    }
    
    function Get_collateral_between_UserOwner(address _to)public view returns(uint,uint,uint){
        
        return(_collateral_between_UserOwner[_to].Repayment_time,_collateral_between_UserOwner[_to].value,_collateral_between_UserOwner[_to].number_token);
    }
    

/*-----------------------------------------------------------------------------------------------------------------------
                                                 Private functions
-----------------------------------------------------------------------------------------------------------------------*/

/*                                         ...................................................
                                                    Detects that the user is an owner
                                           ...................................................
*/

                   
    function User_recognition ( address user ) private view returns ( bool ) {                   
    
       bool T= owners [user];
       
       return T;
       
    }
    
/*                                   ..................................................................
                                     Calculate the number of stock based on the bid price for the stock
                                     ..................................................................
*/
    
    
    function calcute_number_stock_between_users ( address _to , uint _value ) private view returns ( uint ) {     
    
        uint price = User_suggested_price [_to];
        
        uint number_token = _value / price;
        
        uint mind = _value % price;
        
        if ( mind == 0 )
        
          return ( number_token );
          
     //     else
          
      //  return ( number_token + 1 );
    }
    
/*                                   ......................................................................
                                     The number of stock is calculated based on the amount of money receive
                                     ......................................................................
*/
    
    function calculate_NumberToken_requestedOwner ( uint _value ) private view returns ( uint , uint ) {             
    
        uint Amount_returned_with_fee = (( _value / 100) * _fee_loan ) + _value;
        
        uint number_token= Amount_returned_with_fee / _current_stock_price;
        
       // uint mind= Amount_returned_with_fee % _current_stock_price;
        
     //   if (mind==0)
        
          return (number_token , Amount_returned_with_fee);
          
       //    else
           
       //     return (number_token+1 , value2);
    }

/*-----------------------------------------------------------------------------------------------------------------------
                                                   ERC20 functions
-----------------------------------------------------------------------------------------------------------------------*/


    function transfer (address _to , uint256 _value) public returns (bool success) {
        
                    if((balances[msg.sender]-blocked_token[msg.sender]) >= _value)
            {
            
              balances[msg.sender] -= _value;
            
              balances[_to] += _value;
            
              emit Transfer(msg.sender, _to, _value);
            
              return true;
             
            }
                      else
            {
              return false;
            }
    }


    function balanceOf(address addr) public view returns (uint balance) {
       //require (msg.sender==addr);
      // require(owners [msg.sender]==true);
           return balances[addr];
      
    }
    
    function approve(address _spender, uint256 _value) public returns (bool success) {
        
        allowed[msg.sender][_spender] = _value;
        
        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars
        
        return true;
    }
    
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        
        return allowed[_owner][_spender];
        
    }

    event Transfer (address indexed _from, address indexed _to, uint256 _value);
    
    event Approval (address indexed _owner, address indexed _spender, uint256 _value); 
    
    
    
}
